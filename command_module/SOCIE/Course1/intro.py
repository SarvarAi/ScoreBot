from data.Bot_data.loader_unit import dp
from aiogram.types import Message, ReplyKeyboardRemove
from command_module.buttons import Messages
from command_module.SOCIE import sociebtn
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup





@dp.message_handler(regexp='‚úÖIntroduction to IT')
async def sc1intro(message: Message):
    await message.answer('–î–∞–≤–∞–π—Ç–µ —Ä–∞—Å—Å—á–∏—Ç–∞–µ–º –≤–∞—à Total‚ùó')
    with open('D:\Python\inha_score\data_module\Bot_data\Image\SOCIE\Course1\ITgrade.png', mode='rb') as img:
        await message.answer_photo(photo=img,
                                   caption='–°–µ–π—á–∞—Å –±—É–¥–µ–º —Å—á–∏—Ç–∞—Ç—å –≤–∞—à –±–∞–ª–ª –ø–æ —ç—Ç–æ–π —Ç–∞–±–ª–∏—Ü–µ –¥–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º\n‚ô¶–í–≤–æ–¥–∏—Ç–µ –≤—Å–µ —á–∏—Å–ª–∞ –±–µ–∑ –∑–Ω–∞–∫–∞ –ø—Ä–æ—Ü–µ–Ω—Ç (%)',
                                   reply_markup=sociebtn.Buttons.start())
    await Intor_mem.main.set()


@dp.message_handler(state=Intor_mem.main)
async def main_it(message: Message):
    await message.answer('''–ö–∞–∫ –≤—ã –¥—É–º–µ—Ç–µ –ø—Ä–∏–º–µ—Ä–Ω–æ —Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Ü–µ—Ç–æ–≤ –ª–µ–∫—Ü–∏–π –≤—ã –ø–æ—Å–µ—â–∞–ª–∏?''',
                         reply_markup=ReplyKeyboardRemove())
    await Intor_mem.attendance.set()


@dp.message_handler(state=Intor_mem.attendance)
async def attendance(message: Message, state: FSMContext):
    try:
        att = float(message.text)
        if att < 0 or att > 100:
            await Messages(message).error_number()
        else:
            async with state.proxy() as data:
                data['attendance'] = att
            await message.answer('–í —Å—Ä–µ–¥–Ω–µ–º —Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ assignments –≤—ã —Å–¥–∞–ª–∏ –∑–∞ —Å–µ–º–µ—Å—Ç—Ä?')
            await Intor_mem.assignments.set()
    except:
        await Messages(message).error_char()


@dp.message_handler(state=Intor_mem.assignments)
async def assignments(message: Message, state: FSMContext):
    try:
        ass = float(message.text)
        if ass < 0 or ass > 100:
            await Messages(message).error_number()
        else:
            async with state.proxy() as data:
                data['assignments'] = ass
            await message.answer('–ù–∞ —Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –≤—ã —Ö–æ—Ä–æ—à–æ –ø–∏—Å–∞–ª–∏ Quiz?')
            await Intor_mem.quiz.set()
    except:
        await Messages(message).error_char()


@dp.message_handler(state=Intor_mem.quiz)
async def quizes(message: Message, state: FSMContext):
    try:
        q = float(message.text)
        if q < 0 or q > 100:
            await Messages(message).error_number()
        else:
            async with state.proxy() as data:
                data['quiz'] = q
            await message.answer('–ù–∞ —Å–∫–æ–ª—å–∫–æ –±–∞–ª–ª–æ–≤ –∏–∑ 100 –≤—ã –Ω–∞–ø–∏—Å–∞–ª–∏ Midterm?')
            await Intor_mem.midScore.set()
    except:
        await Messages(message).error_char()


@dp.message_handler(state=Intor_mem.midScore)
async def midterm(message: Message, state: FSMContext):
    try:
        mid = float(message.text)
        if mid < 0 or mid > 100:
            await Messages(message).error_number()
        else:
            async with state.proxy() as data:
                data['midScore'] = mid
            await message.answer('–ù–∞ —Å–∫–æ–ª—å–∫–æ –±–∞–ª–ª–æ–≤ –∏–∑ 100 –≤—ã –Ω–∞–ø–∏—Å–∞–ª–∏ Final?')
            await Intor_mem.finScore.set()
    except:
        await Messages(message).error_char()


@dp.message_handler(state=Intor_mem.finScore)
async def midterm(message: Message, state: FSMContext):
    try:
        fin = float(message.text)
        if fin < 0 or fin > 100:
            await Messages(message).error_number()
        else:
            async with state.proxy() as data:
                data['finScore'] = fin
            await message.answer('–ú—ã –≤—ã—Å—á–∏—Ç–∞–ª–∏ –≤–∞—à Total', reply_markup=sociebtn.Buttons.show())
            await Intor_mem.total.set()
    except:
        await Messages(message).error_char()



@dp.message_handler(state=Intor_mem.total)
async def total(message: Message, state: FSMContext):
    data = await state.get_data()

    att = data['attendance']
    ass = data['assignments']
    quiz = data['quiz']
    mid = data['midScore']
    fin = data['finScore']

    att_t = (10 * att) / 100
    ass_t = (15 * ass) / 100
    quiz_t = (15 * quiz) / 100
    mid_t = (30 * mid) / 100
    fin_t = (30 * fin) / 100

    total = att_t + ass_t + quiz_t + mid_t + fin_t
    await message.answer(parse_mode='HTML', text=f'<b>–í–∞—à Total: {round(total, 1)}</b> ü§Ø',
                         reply_markup=ReplyKeyboardRemove())
    await state.finish()