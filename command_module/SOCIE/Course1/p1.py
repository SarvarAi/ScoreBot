from data.Bot_data.loader_unit import dp
from aiogram.types import Message, ReplyKeyboardRemove
from command_module.buttons import Messages
from command_module.SOCIE import sociebtn
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup


class P1_mem(StatesGroup):
    main = State()
    hw_ass_att = State()
    midScore = State()
    finScore = State()
    total = State()


@dp.message_handler(regexp='‚úÖPhysics 1', state=None)
async def sc1p1(message: Message):
    await message.answer('–î–∞–≤–∞–π—Ç–µ —Ä–∞—Å—Å—á–∏—Ç–∞–µ–º –≤–∞—à Total‚ùó')
    with open('D:\Python\inha_score\data_module\Bot_data\Image\SOCIE\Course1\P1grade.png', mode='rb') as img:
        await message.answer_photo(img,
                                   caption='–°–µ–π—á–∞—Å –±—É–¥–µ–º —Å—á–∏—Ç–∞—Ç—å –≤–∞—à –±–∞–ª–ª –ø–æ —ç—Ç–æ–π —Ç–∞–±–ª–∏—Ü–µ –¥–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º\n‚ô¶–í–≤–æ–¥–∏—Ç–µ –≤—Å–µ —á–∏—Å–ª–∞ –±–µ–∑ –∑–Ω–∞–∫–∞ –ø—Ä–æ—Ü–µ–Ω—Ç (%)',
                                   reply_markup=sociebtn.Buttons.start())
    await P1_mem.main.set()


@dp.message_handler(state=P1_mem.main)
async def p1_main(message: Message):
    await message.answer('''–°–∫–æ–ª—å–∫–æ –≤—ã –ø–æ–ª—É—á–∏–ª–∞ –∑–∞ Midterm –∏–∑ 30?''', reply_markup=ReplyKeyboardRemove())
    await P1_mem.midScore.set()


@dp.message_handler(state=P1_mem.midScore)
async def mid_score(message: Message, state: FSMContext):
    try:
        mid = float(message.text)
        if mid < 0 or mid > 30:
            await Messages(message).error_number()
        else:
            async with state.proxy() as data:
                data['midScore'] = mid
            await message.answer('–°–∫–æ–ª—å–∫–æ –≤—ã –ø–æ–ª—É—á–∏–ª–∞ –∑–∞ Final –∏–∑ 40?')
            await P1_mem.finScore.set()
    except:
        await Messages(message).error_char()


@dp.message_handler(state=P1_mem.finScore)
async def fin_score(message: Message, state: FSMContext):
    try:
        fin = float(message.text)
        if fin < 0 or fin > 40:
            await Messages(message).error_number()
        else:
            async with state.proxy() as data:
                data['finScore'] = fin
            with open('D:\Python\inha_score\data_module\Bot_data\Image\SOCIE\Course1\PEgrade_spc.png',
                      mode='rb') as img:
                await message.answer_photo(img,
                                           caption='''–ò–∑-–∑–∞ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∏ –æ–ø–∏—Å–∞–Ω–∏—è —ç—Ç–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ üßê \n–ù–∞ —Å–∫–æ–ª—å–∫–æ –≤—ã –≤—ã–ø–æ–ª–Ω—è–ª–∏ –≤—Å–µ —ç—Ç–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏–∑ 20?''')
            await P1_mem.hw_ass_att.set()
    except:
        await Messages(message).error_char()


@dp.message_handler(state=P1_mem.hw_ass_att)
async def imp_3_att(message: Message, state: FSMContext):
    try:
        aha = float(message.text)
        if aha < 0 or aha > 20:
            await Messages(message).error_number()
        else:
            async with state.proxy() as data:
                data['hw_ass_att'] = aha
            await message.answer('–ú—ã –≤—ã—Å—á–∏—Ç–∞–ª–∏ –≤–∞—à Total', reply_markup=sociebtn.Buttons.show())
            await P1_mem.total.set()
    except:
        await Messages(message).error_char()


@dp.message_handler(state=P1_mem.total)
async def total(message: Message, state: FSMContext):
    data = await state.get_data()

    aha = data['hw_ass_att']
    fin = data['finScore']
    mid = data['midScore']

    fin_t = (fin * 100) / 40
    fin_t_1 = (50 * fin_t) / 100
    total_t = aha + mid + fin_t_1

    await message.answer(parse_mode='HTML', text=f'<b>–í–∞—à Total: {round(total_t, 1)}</b> ü§Ø',
                         reply_markup=ReplyKeyboardRemove())
    await state.finish()
